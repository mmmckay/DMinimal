{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/Tracker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/Tracker.vue","mtime":1539902140719},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AbilityScores from '@/components/AbilityScores'\nimport Class from '@/components/Class'\nimport SpellCast from '@/components/SpellCast'\nimport HitPoints from '@/components/HitPoints'\nimport DeathSavingThrows from './DeathSavingThrows.vue'\nimport Initiative from '@/components/Initiative'\nexport default {\n  name: 'Tracker',\n  props: ['id', 'index'],\n  components: {\n    'ability-scores': AbilityScores,\n    'character-class': Class,\n    'death-throws': DeathSavingThrows,\n    'spell-cast': SpellCast,\n    'hit-points': HitPoints,\n    'initiative': Initiative\n  },\n  computed: {\n    classOpts() {\n      return this.$store.state.classOpts\n    },\n    hitDice() {\n      return this.$store.state.hitDice\n    },\n    character() {\n      return this.$store.state.characters[this.index]\n    },\n    hitpoints() {\n      return this.character.hitpoints\n    },\n    maxHitpoints() {\n      return this.character.maxHitpoints\n    },\n    proficiencyBonus() {\n      return this.character.proficiency\n    },\n    name: {\n      get() {\n        return this.character.name\n      },\n      set(state) {\n        this.$store.commit('changeName', {\n          index: this.index,\n          name: state,\n        })\n      },\n    },\n  },\n  data() {\n    return {\n      concentrationDialog: false,\n      shortRestDie: {},\n    }\n  },\n  methods: {\n    multiclass() {\n      this.$store.commit('multiclass', { index: this.index, classname: '' })\n    },\n    longRest() {\n      this.$store.commit('longRest', this.index)\n    },\n    resetCharacter() {\n      for (let c in this.character.classes) {\n        this.$store.commit('updateSlots', {\n          charIndex: this.index,\n          classIndex: c,\n        })\n      }\n    },\n    performShortRest() {\n      let restoredHealth = 0\n      for (let a in this.shortRestDie) {\n        restoredHealth += Math.floor(Math.random() * this.shortRestDie[a])\n      }\n      this.$store.commit('setHP', {\n        charIndex: this.index,\n        hitpoints: parseInt(this.hitpoints) + restoredHealth,\n      })\n      this.$store.commit('hideSnackbar')\n    },\n    shortRest() {\n      let acc = {}\n      for (let c in this.character.classes) {\n        if (!this.hitDice.hasOwnProperty(this.character.classes[c].classname.split(' ')[0])) {\n          continue\n        }\n        let hitDie = this.hitDice[this.character.classes[c].classname.split(' ')[0]]\n        if (!acc.hasOwnProperty(hitDie)) {\n          acc[hitDie] = 0\n        }\n        acc[hitDie] += this.character.classes[c].level\n      }\n      let message = []\n      this.shortRestDie = []\n      for (let k in acc) {\n        message.push(acc[k].toString() + 'd' + k.toString())\n        this.shortRestDie.push.apply(\n          this.shortRestDie,\n          new Array(acc[k]).fill(k),\n        )\n      }\n      message = 'Restore ' + message.join(', ')\n      this.$store.commit('showSnackbar', {\n        color: 'green',\n        message: message,\n        func: this.performShortRest,\n        buttonMessage: 'Roll',\n      })\n    },\n    stopConcentrating() {\n      this.$store.commit('stopConcentrating', this.index)\n    },\n    castSpell() {\n      this.$refs.spellCast.spellPreflight()\n    },\n  },\n}\n",{"version":3,"sources":["Tracker.vue"],"names":[],"mappingsfile":"Tracker.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-card>\n      <!-- Name -->\n      <v-layout align-center row ml-3>\n        <v-flex xs11>\n          <v-text-field v-model=\"name\" placeholder=\"Name...\"></v-text-field>\n        </v-flex>\n      </v-layout>\n      <!-- End Name -->\n      <!-- \"Buttons\" -->\n      <v-layout column>\n        <v-layout align-center row>\n          <v-tooltip top>\n            <v-btn icon slot=\"activator\" @click=\"multiclass()\">\n              <v-icon>add_circle_outline</v-icon>\n            </v-btn>\n            <span>Multiclass</span>\n          </v-tooltip>\n          <v-tooltip top>\n            <v-btn flat slot=\"activator\" icon @click=\"castSpell()\">\n              <v-icon>mdi-auto-fix</v-icon>\n            </v-btn>\n            <span>Cast Spell</span>\n          </v-tooltip>\n          <v-tooltip top>\n            <v-btn flat icon slot=\"activator\" @click=\"longRest()\">\n              <v-icon>mdi-sleep</v-icon>\n            </v-btn>\n            <span>Long Rest</span>\n          </v-tooltip>\n          <v-tooltip top>\n            <v-btn flat icon slot=\"activator\" @click=\"shortRest()\"> \n              <v-icon>mdi-bell-sleep</v-icon>\n            </v-btn>\n            <span>Short Rest</span>\n          </v-tooltip>\n          <v-tooltip top>\n            <v-btn :disabled=\"!character.concentrating\" @click=\"concentrationDialog=true\" flat icon slot=\"activator\"><v-icon>remove_red_eye</v-icon></v-btn>\n            <span v-if=\"character.concentrating\">Concentrating on {{character.concentrating}}</span>\n            <span v-if=\"!character.concentrating || character.concentrating === ''\">Not currently concentrating</span>\n          </v-tooltip>\n          <v-tooltip top>\n            <h3 slot=\"activator\">+{{proficiencyBonus}}</h3>\n            <span>Proficiency Bonus</span>\n          </v-tooltip>\n        </v-layout>\n        <initiative :charIndex=\"index\"/>\n        <v-layout align-center row>\n          <!-- Hit Points -->\n          <hit-points :charIndex=\"index\"></hit-points>\n          <!-- End Hit Points -->\n        </v-layout>\n      </v-layout>\n      <death-throws v-if=\"hitpoints <= 0 && maxHitpoints > 0\" :charIndex=\"index\"/>\n      <v-dialog v-model=\"concentrationDialog\" max-width=300>\n        <v-card>\n          <v-card-text>\n            <h2>Stop Concentrating on {{character.concentrating}}?</h2>\n          </v-card-text>\n          <v-layout column>\n            <v-btn @click=\"concentrationDialog = false; stopConcentrating()\" flat> Yes </v-btn>\n            <v-btn @click=\"concentrationDialog = false;\" flat> No </v-btn>\n          </v-layout>\n        </v-card>\n      </v-dialog>\n      <!-- End \"Buttons\" -->\n      <!-- Ability Scores -->\n      <ability-scores :scores=\"character.abilityScores\" :index=\"index\"></ability-scores>\n      <!-- End Ability Scores -->\n      <v-card-text v-for=\"(characterClass, classindex) in character.classes\" :key=\"classindex\">\n        <!-- TODO Class-specific stuff -->\n        <character-class :charIndex=\"index\" :classIndex=\"classindex\"> </character-class>\n      </v-card-text>\n      <spell-cast :charIndex=\"index\" ref=\"spellCast\"/>\n    </v-card>\n</template>\n\n<script>\nimport AbilityScores from '@/components/AbilityScores'\nimport Class from '@/components/Class'\nimport SpellCast from '@/components/SpellCast'\nimport HitPoints from '@/components/HitPoints'\nimport DeathSavingThrows from './DeathSavingThrows.vue'\nimport Initiative from '@/components/Initiative'\nexport default {\n  name: 'Tracker',\n  props: ['id', 'index'],\n  components: {\n    'ability-scores': AbilityScores,\n    'character-class': Class,\n    'death-throws': DeathSavingThrows,\n    'spell-cast': SpellCast,\n    'hit-points': HitPoints,\n    'initiative': Initiative\n  },\n  computed: {\n    classOpts() {\n      return this.$store.state.classOpts\n    },\n    hitDice() {\n      return this.$store.state.hitDice\n    },\n    character() {\n      return this.$store.state.characters[this.index]\n    },\n    hitpoints() {\n      return this.character.hitpoints\n    },\n    maxHitpoints() {\n      return this.character.maxHitpoints\n    },\n    proficiencyBonus() {\n      return this.character.proficiency\n    },\n    name: {\n      get() {\n        return this.character.name\n      },\n      set(state) {\n        this.$store.commit('changeName', {\n          index: this.index,\n          name: state,\n        })\n      },\n    },\n  },\n  data() {\n    return {\n      concentrationDialog: false,\n      shortRestDie: {},\n    }\n  },\n  methods: {\n    multiclass() {\n      this.$store.commit('multiclass', { index: this.index, classname: '' })\n    },\n    longRest() {\n      this.$store.commit('longRest', this.index)\n    },\n    resetCharacter() {\n      for (let c in this.character.classes) {\n        this.$store.commit('updateSlots', {\n          charIndex: this.index,\n          classIndex: c,\n        })\n      }\n    },\n    performShortRest() {\n      let restoredHealth = 0\n      for (let a in this.shortRestDie) {\n        restoredHealth += Math.floor(Math.random() * this.shortRestDie[a])\n      }\n      this.$store.commit('setHP', {\n        charIndex: this.index,\n        hitpoints: parseInt(this.hitpoints) + restoredHealth,\n      })\n      this.$store.commit('hideSnackbar')\n    },\n    shortRest() {\n      let acc = {}\n      for (let c in this.character.classes) {\n        if (!this.hitDice.hasOwnProperty(this.character.classes[c].classname.split(' ')[0])) {\n          continue\n        }\n        let hitDie = this.hitDice[this.character.classes[c].classname.split(' ')[0]]\n        if (!acc.hasOwnProperty(hitDie)) {\n          acc[hitDie] = 0\n        }\n        acc[hitDie] += this.character.classes[c].level\n      }\n      let message = []\n      this.shortRestDie = []\n      for (let k in acc) {\n        message.push(acc[k].toString() + 'd' + k.toString())\n        this.shortRestDie.push.apply(\n          this.shortRestDie,\n          new Array(acc[k]).fill(k),\n        )\n      }\n      message = 'Restore ' + message.join(', ')\n      this.$store.commit('showSnackbar', {\n        color: 'green',\n        message: message,\n        func: this.performShortRest,\n        buttonMessage: 'Roll',\n      })\n    },\n    stopConcentrating() {\n      this.$store.commit('stopConcentrating', this.index)\n    },\n    castSpell() {\n      this.$refs.spellCast.spellPreflight()\n    },\n  },\n}\n</script>\n"]}]}