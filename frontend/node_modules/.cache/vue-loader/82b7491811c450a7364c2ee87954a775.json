{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/src/components/MagicClass.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/src/components/MagicClass.vue","mtime":1539831976481},{"path":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/rtfreedman/SpellTracker/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SpellSlots from '@/components/SpellSlots'\nexport default {\n  props: ['charIndex', 'classIndex'],\n  components: {\n    'spell-slots': SpellSlots,\n  },\n  computed: {\n    character() {\n      return this.$store.state.characters[this.charIndex]\n    },\n    classItem() {\n      return this.character.classes[this.classIndex]\n    },\n    spellDC() {\n      return this.spellMod + 8\n    },\n    spellMod() {\n      let mod = this.getMod(\n        this.$store.state.characters[this.charIndex].abilityScores.INT,\n      )\n      if (this.chrClasses.includes(this.classItem.classname)) {\n        mod = this.getMod(\n          this.$store.state.characters[this.charIndex].abilityScores.CHR,\n        )\n      } else if (this.wisClasses.includes(this.classItem.classname)) {\n        mod = this.getMod(\n          this.$store.state.characters[this.charIndex].abilityScores.WIS,\n        )\n      }\n      return this.character.proficiency + mod\n    },\n  },\n  data() {\n    return {\n      chrClasses: ['Bard', 'Sorcerer', 'Paladin', 'Warlock'],\n      wisClasses: ['Cleric', 'Druid', 'Ranger'],\n    }\n  },\n  methods: {\n    getMod(val) {\n      return Math.floor((val - 10) / 2)\n    },\n  },\n}\n",{"version":3,"sources":["MagicClass.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MagicClass.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <v-layout align-start justify-center column fill-height m-3>\n      <h3>Spell Atk Mod : d20<span v-if=\"spellMod >= 0\"> +</span> {{spellMod}} </h3>\n      <h3>Spell Save DC : {{spellDC}} </h3>\n    </v-layout>\n    <spell-slots :charIndex=\"charIndex\" :classIndex=\"classIndex\"> </spell-slots>\n  </div>\n</template>\n\n<script>\nimport SpellSlots from '@/components/SpellSlots'\nexport default {\n  props: ['charIndex', 'classIndex'],\n  components: {\n    'spell-slots': SpellSlots,\n  },\n  computed: {\n    character() {\n      return this.$store.state.characters[this.charIndex]\n    },\n    classItem() {\n      return this.character.classes[this.classIndex]\n    },\n    spellDC() {\n      return this.spellMod + 8\n    },\n    spellMod() {\n      let mod = this.getMod(\n        this.$store.state.characters[this.charIndex].abilityScores.INT,\n      )\n      if (this.chrClasses.includes(this.classItem.classname)) {\n        mod = this.getMod(\n          this.$store.state.characters[this.charIndex].abilityScores.CHR,\n        )\n      } else if (this.wisClasses.includes(this.classItem.classname)) {\n        mod = this.getMod(\n          this.$store.state.characters[this.charIndex].abilityScores.WIS,\n        )\n      }\n      return this.character.proficiency + mod\n    },\n  },\n  data() {\n    return {\n      chrClasses: ['Bard', 'Sorcerer', 'Paladin', 'Warlock'],\n      wisClasses: ['Cleric', 'Druid', 'Ranger'],\n    }\n  },\n  methods: {\n    getMod(val) {\n      return Math.floor((val - 10) / 2)\n    },\n  },\n}\n</script>\n"]}]}