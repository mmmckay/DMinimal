{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/SpellCast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/SpellCast.vue","mtime":1539899859882},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: ['charIndex'],\n  computed: {\n    character() {\n      return this.$store.state.characters[this.charIndex]\n    },\n    classItem() {\n      return this.character.classes[this.selectedClass]\n    },\n    concentrating() {\n      return this.character.concentrating\n    },\n    currSpellInfo() {\n      return this.$store.state.spellsInfo.currSpellInfo\n    },\n    currSpellClass() {\n      return this.$store.state.spellsInfo.className\n    },\n    magicClassOpts() {\n      return this.$store.state.magicClassOpts\n    },\n    spellOpts() {\n      return this.$store.state.spellsInfo.spellList\n    },\n    workingSlots() {\n      return this.classItem.workingSlots\n    },\n  },\n  data() {\n    return {\n      spellSearchDialogOpts: {\n        Level: 'Level',\n        School: 'School',\n        Duration: 'Duration',\n        SpellRange: 'Range',\n        Components: 'Components',\n      }, // why is this shameful?\n      classChoiceDialog: false,\n      spellSearchDialog: false,\n      atHigherLevelDialog: false,\n      classChoices: [],\n      input: '',\n      spellInput: '',\n      selectedClass: 0,\n      snackbarMessage: '',\n      snackbar: false,\n    }\n  },\n  watch: {\n    spellInput(val) {\n      if (\n        this.currSpellInfo.hasOwnProperty('Name') &&\n        val === this.currSpellInfo.Name\n      ) {\n        return\n      }\n      let r = new Request('http://localhost:8010/magic/spell/' + val, {\n        method: 'GET',\n      })\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          this.$store.commit('setSpellInfo', response)\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n  },\n  methods: {\n    spellPreflight() {\n      let magicClasses = []\n      for (let c in this.character.classes) {\n        if (this.magicClassOpts.includes(this.character.classes[c].classname)) {\n          magicClasses.push(c)\n        }\n      }\n      if (magicClasses.length > 1) {\n        this.classChoices = magicClasses\n        this.classChoiceDialog = true\n      } else if (magicClasses.length === 1) {\n        this.selectedClass = 0\n        this.spellSearchDialog = true\n        this.fetchSpellOpts()\n      } else {\n        this.$store.commit('showSnackbar', {\n          message: 'Cannot Cast Spells: No Magic Classes',\n        })\n      }\n    },\n    fetchSpellOpts() {\n      if (this.currSpellClass === this.classItem.classname) {\n        return\n      }\n      let strBody = JSON.stringify({\n        classes: [this.classItem.classname],\n        spellName: '',\n      })\n      let r = new Request('http://localhost:8010/magic/search/', {\n        method: 'Post',\n        body: strBody,\n      })\n      let opts = []\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          opts = response.spellOpts\n          this.$store.commit('setSpellOpts', {\n            spellOpts: opts,\n            className: this.classItem.classname,\n          })\n          this.spellSearchDialog = true\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n    stopConcentrating() {\n      this.$store.commit('stopConcentrating', this.charIndex)\n      this.$store.commit('hideSnackbar')\n    },\n    castSpell() {\n      if (\n        this.concentrating &&\n        this.currSpellInfo.hasOwnProperty('Concentration')\n      ) {\n        // launch concentration snackbar\n        this.$store.commit('showSnackbar', {\n          message: 'Concentrating on ' + this.concentrating,\n          func: this.stopConcentrating,\n          buttonMessage: 'Stop Concentrating',\n        })\n        return\n      }\n      if (this.workingSlots[this.currSpellInfo.Level.toString()] !== 0) {\n        this.$store.commit('decrementSlot', {\n          charIndex: this.charIndex,\n          classIndex: this.selectedClass,\n          level: this.currSpellInfo.Level,\n        })\n        this.spellSearchDialog = false\n        return\n      }\n      let slotsAvailable = false\n      for (let i = this.currSpellInfo.Level + 1; i < 10; i++) {\n        if (this.workingSlots[i.toString()] > 0) {\n          slotsAvailable = true\n          break\n        }\n      }\n      let payload = {\n        message: 'No slots available at spell level',\n      }\n      if (slotsAvailable) {\n        payload['func'] = this.openAtHigherLevelDialog\n        payload['buttonMessage'] = 'Cast at Higher Level?'\n      }\n      this.$store.commit('showSnackbar', payload)\n    },\n    openAtHigherLevelDialog() {\n      this.atHigherLevelDialog = true\n      this.$store.commit('hideSnackbar')\n    },\n    castSpellAtLvl(level) {\n      this.$store.commit('decrementSlot', {\n        charIndex: this.charIndex,\n        classIndex: this.selectedClass,\n        level: level,\n      })\n      this.atHigherLevelDialog = false\n      this.spellSearchDialog = false\n    },\n  },\n}\n",{"version":3,"sources":["SpellCast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SpellCast.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <!-- Multiple Classes Dialog -->\n    <v-dialog v-model=\"classChoiceDialog\" max-width=\"300\">\n      <v-card>\n        <v-layout column align-center justify-center ma-2>\n          <h2>Cast as which class?</h2>\n          <v-btn @click=\"selectedClass = index; classChoiceDialog = false; fetchSpellOpts()\" flat v-for=\"(c, index) in character.classes\" :key=\"c.classname\">{{c.classname}}</v-btn>\n        </v-layout>\n      </v-card>\n    </v-dialog>\n    <!-- End Multiple Classes Dialog -->\n    <v-dialog persistent v-model=\"spellSearchDialog\" max-width=\"800\">\n      <v-card>\n        <v-card-title class=\"headline\">Find spell</v-card-title>\n        <v-card-text>\n          <v-autocomplete\n            v-model=\"spellInput\"\n            placeholder='Spell...'\n            :search-input.sync=\"input\"\n            :items=\"spellOpts\"\n          />\n        </v-card-text>\n        <v-card-text>\n          <h1>{{currSpellInfo.Name}}</h1>\n          <div v-if=\"currSpellInfo.hasOwnProperty('Concentration')\">Concentration</div>\n          <v-list dense>\n            <v-list-tile v-if=\"currSpellInfo.hasOwnProperty(elem)\" v-for=\"(elem, text) in spellSearchDialogOpts\" :key=\"elem\">\n              <v-list-tile-content><h3>{{text}}:</h3></v-list-tile-content>\n              <v-list-tile-content class=\"align-end\">{{ currSpellInfo[elem] }}</v-list-tile-content>\n            </v-list-tile>\n            <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('Classes')\">\n              <v-list-tile-content><h3>Classes:</h3></v-list-tile-content>\n              <v-list-tile-content v-if=\"currSpellInfo.Classes\" class=\"align-end\">{{ currSpellInfo.Classes.join(\", \") }}</v-list-tile-content>\n            </v-list-tile>\n            <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('AtHigherLevels') && currSpellInfo.AtHigherLevels !== ''\">\n              <v-list-tile-content><h3>At Higher Levels:</h3></v-list-tile-content>\n            </v-list-tile>\n            <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('AtHigherLevels') && currSpellInfo.AtHigherLevels !== ''\">\n              <v-list-tile-content>{{ currSpellInfo.AtHigherLevels }}</v-list-tile-content>\n            </v-list-tile>\n            <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('Description')\">\n              <v-list-tile-content><h3>Description:</h3></v-list-tile-content>\n            </v-list-tile>\n            <v-list-tile-content v-if=\"currSpellInfo.hasOwnProperty('Description')\">{{ currSpellInfo.Description }}</v-list-tile-content>\n          </v-list>\n        </v-card-text>\n        <v-card-actions>\n          <v-btn color=\"red lighten-1\" flat @click=\"spellSearchDialog = false\"> Close </v-btn>\n          <v-btn color=\"green lighten-1\" flat @click=\"castSpell()\"> Cast </v-btn>\n          <v-btn color=\"yellow darken-1\" flat @click=\"atHigherLevelDialog=true\"> At Higher Level </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-dialog v-model=\"atHigherLevelDialog\" max-width=\"200\">\n      <v-card>\n        <v-layout column justify-center align-center>\n          <h2>Cast at level...</h2>\n          <v-btn flat v-for=\"(value, level) in this.workingSlots\"\n            v-if=\"value > 0 && parseInt(level, 10) > currSpellInfo.Level\"\n            @click=\"castSpellAtLvl(parseInt(level, 10))\" :key=\"level\">\n              {{level}}\n          </v-btn>\n        </v-layout>\n        <v-btn flat @click=\"atHigherLevelDialog=false\" color=\"red\">Close</v-btn>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['charIndex'],\n  computed: {\n    character() {\n      return this.$store.state.characters[this.charIndex]\n    },\n    classItem() {\n      return this.character.classes[this.selectedClass]\n    },\n    concentrating() {\n      return this.character.concentrating\n    },\n    currSpellInfo() {\n      return this.$store.state.spellsInfo.currSpellInfo\n    },\n    currSpellClass() {\n      return this.$store.state.spellsInfo.className\n    },\n    magicClassOpts() {\n      return this.$store.state.magicClassOpts\n    },\n    spellOpts() {\n      return this.$store.state.spellsInfo.spellList\n    },\n    workingSlots() {\n      return this.classItem.workingSlots\n    },\n  },\n  data() {\n    return {\n      spellSearchDialogOpts: {\n        Level: 'Level',\n        School: 'School',\n        Duration: 'Duration',\n        SpellRange: 'Range',\n        Components: 'Components',\n      }, // why is this shameful?\n      classChoiceDialog: false,\n      spellSearchDialog: false,\n      atHigherLevelDialog: false,\n      classChoices: [],\n      input: '',\n      spellInput: '',\n      selectedClass: 0,\n      snackbarMessage: '',\n      snackbar: false,\n    }\n  },\n  watch: {\n    spellInput(val) {\n      if (\n        this.currSpellInfo.hasOwnProperty('Name') &&\n        val === this.currSpellInfo.Name\n      ) {\n        return\n      }\n      let r = new Request('http://localhost:8010/magic/spell/' + val, {\n        method: 'GET',\n      })\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          this.$store.commit('setSpellInfo', response)\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n  },\n  methods: {\n    spellPreflight() {\n      let magicClasses = []\n      for (let c in this.character.classes) {\n        if (this.magicClassOpts.includes(this.character.classes[c].classname)) {\n          magicClasses.push(c)\n        }\n      }\n      if (magicClasses.length > 1) {\n        this.classChoices = magicClasses\n        this.classChoiceDialog = true\n      } else if (magicClasses.length === 1) {\n        this.selectedClass = 0\n        this.spellSearchDialog = true\n        this.fetchSpellOpts()\n      } else {\n        this.$store.commit('showSnackbar', {\n          message: 'Cannot Cast Spells: No Magic Classes',\n        })\n      }\n    },\n    fetchSpellOpts() {\n      if (this.currSpellClass === this.classItem.classname) {\n        return\n      }\n      let strBody = JSON.stringify({\n        classes: [this.classItem.classname],\n        spellName: '',\n      })\n      let r = new Request('http://localhost:8010/magic/search/', {\n        method: 'Post',\n        body: strBody,\n      })\n      let opts = []\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          opts = response.spellOpts\n          this.$store.commit('setSpellOpts', {\n            spellOpts: opts,\n            className: this.classItem.classname,\n          })\n          this.spellSearchDialog = true\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n    stopConcentrating() {\n      this.$store.commit('stopConcentrating', this.charIndex)\n      this.$store.commit('hideSnackbar')\n    },\n    castSpell() {\n      if (\n        this.concentrating &&\n        this.currSpellInfo.hasOwnProperty('Concentration')\n      ) {\n        // launch concentration snackbar\n        this.$store.commit('showSnackbar', {\n          message: 'Concentrating on ' + this.concentrating,\n          func: this.stopConcentrating,\n          buttonMessage: 'Stop Concentrating',\n        })\n        return\n      }\n      if (this.workingSlots[this.currSpellInfo.Level.toString()] !== 0) {\n        this.$store.commit('decrementSlot', {\n          charIndex: this.charIndex,\n          classIndex: this.selectedClass,\n          level: this.currSpellInfo.Level,\n        })\n        this.spellSearchDialog = false\n        return\n      }\n      let slotsAvailable = false\n      for (let i = this.currSpellInfo.Level + 1; i < 10; i++) {\n        if (this.workingSlots[i.toString()] > 0) {\n          slotsAvailable = true\n          break\n        }\n      }\n      let payload = {\n        message: 'No slots available at spell level',\n      }\n      if (slotsAvailable) {\n        payload['func'] = this.openAtHigherLevelDialog\n        payload['buttonMessage'] = 'Cast at Higher Level?'\n      }\n      this.$store.commit('showSnackbar', payload)\n    },\n    openAtHigherLevelDialog() {\n      this.atHigherLevelDialog = true\n      this.$store.commit('hideSnackbar')\n    },\n    castSpellAtLvl(level) {\n      this.$store.commit('decrementSlot', {\n        charIndex: this.charIndex,\n        classIndex: this.selectedClass,\n        level: level,\n      })\n      this.atHigherLevelDialog = false\n      this.spellSearchDialog = false\n    },\n  },\n}\n</script>\n"]}]}