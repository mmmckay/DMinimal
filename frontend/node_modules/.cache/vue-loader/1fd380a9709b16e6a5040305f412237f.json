{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/SpellCast.vue?vue&type=template&id=92510df2&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/SpellCast.vue","mtime":1539899859882},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div>\n  <!-- Multiple Classes Dialog -->\n  <v-dialog v-model=\"classChoiceDialog\" max-width=\"300\">\n    <v-card>\n      <v-layout column align-center justify-center ma-2>\n        <h2>Cast as which class?</h2>\n        <v-btn @click=\"selectedClass = index; classChoiceDialog = false; fetchSpellOpts()\" flat v-for=\"(c, index) in character.classes\" :key=\"c.classname\">{{c.classname}}</v-btn>\n      </v-layout>\n    </v-card>\n  </v-dialog>\n  <!-- End Multiple Classes Dialog -->\n  <v-dialog persistent v-model=\"spellSearchDialog\" max-width=\"800\">\n    <v-card>\n      <v-card-title class=\"headline\">Find spell</v-card-title>\n      <v-card-text>\n        <v-autocomplete\n          v-model=\"spellInput\"\n          placeholder='Spell...'\n          :search-input.sync=\"input\"\n          :items=\"spellOpts\"\n        />\n      </v-card-text>\n      <v-card-text>\n        <h1>{{currSpellInfo.Name}}</h1>\n        <div v-if=\"currSpellInfo.hasOwnProperty('Concentration')\">Concentration</div>\n        <v-list dense>\n          <v-list-tile v-if=\"currSpellInfo.hasOwnProperty(elem)\" v-for=\"(elem, text) in spellSearchDialogOpts\" :key=\"elem\">\n            <v-list-tile-content><h3>{{text}}:</h3></v-list-tile-content>\n            <v-list-tile-content class=\"align-end\">{{ currSpellInfo[elem] }}</v-list-tile-content>\n          </v-list-tile>\n          <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('Classes')\">\n            <v-list-tile-content><h3>Classes:</h3></v-list-tile-content>\n            <v-list-tile-content v-if=\"currSpellInfo.Classes\" class=\"align-end\">{{ currSpellInfo.Classes.join(\", \") }}</v-list-tile-content>\n          </v-list-tile>\n          <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('AtHigherLevels') && currSpellInfo.AtHigherLevels !== ''\">\n            <v-list-tile-content><h3>At Higher Levels:</h3></v-list-tile-content>\n          </v-list-tile>\n          <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('AtHigherLevels') && currSpellInfo.AtHigherLevels !== ''\">\n            <v-list-tile-content>{{ currSpellInfo.AtHigherLevels }}</v-list-tile-content>\n          </v-list-tile>\n          <v-list-tile v-if=\"currSpellInfo.hasOwnProperty('Description')\">\n            <v-list-tile-content><h3>Description:</h3></v-list-tile-content>\n          </v-list-tile>\n          <v-list-tile-content v-if=\"currSpellInfo.hasOwnProperty('Description')\">{{ currSpellInfo.Description }}</v-list-tile-content>\n        </v-list>\n      </v-card-text>\n      <v-card-actions>\n        <v-btn color=\"red lighten-1\" flat @click=\"spellSearchDialog = false\"> Close </v-btn>\n        <v-btn color=\"green lighten-1\" flat @click=\"castSpell()\"> Cast </v-btn>\n        <v-btn color=\"yellow darken-1\" flat @click=\"atHigherLevelDialog=true\"> At Higher Level </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n  <v-dialog v-model=\"atHigherLevelDialog\" max-width=\"200\">\n    <v-card>\n      <v-layout column justify-center align-center>\n        <h2>Cast at level...</h2>\n        <v-btn flat v-for=\"(value, level) in this.workingSlots\"\n          v-if=\"value > 0 && parseInt(level, 10) > currSpellInfo.Level\"\n          @click=\"castSpellAtLvl(parseInt(level, 10))\" :key=\"level\">\n            {{level}}\n        </v-btn>\n      </v-layout>\n      <v-btn flat @click=\"atHigherLevelDialog=false\" color=\"red\">Close</v-btn>\n    </v-card>\n  </v-dialog>\n</div>\n",null]}