{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/Initiative.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/Initiative.vue","mtime":1539902140718},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'initiative',\n  props: ['charIndex'],\n  computed: {\n    character () {\n      return this.$store.state.characters[this.charIndex]\n    },\n    initiative: {\n      get () {\n        return this.character.initiative\n      },\n      set (val) {\n        if (this.validate(val) !== true) {\n          return\n        }\n        let newInitiative = null\n        if (val !== null) {\n          newInitiative = parseInt(val)\n        }\n        this.$store.commit('setInitiative', {\n          charIndex: this.charIndex,\n          initiative: newInitiative\n        })\n      }\n    }\n  },\n  methods: {\n    validate (val) {\n      if (typeof val === 'string' && val.toLowerCase().includes('e')) {\n        return 'Scientific notation not allowed'\n      }\n      if (val === null) {\n        return true\n      }\n      if (isNaN(parseInt(val))) {\n        return 'Input is not a number'\n      }\n      if (parseInt(val) < 0) {\n        return 'No negative numbers'\n      }\n      return true\n    },\n    rollInitiative () {\n      this.initiative = Math.floor((this.character.abilityScores.DEX - 10) / 2) + Math.floor(Math.random() * 20) + 1\n    },\n    clearInitiative () {\n      this.initiative = null\n    }\n  }\n}\n",{"version":3,"sources":["Initiative.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Initiative.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout row>\n    <v-flex xs2>\n      <v-layout row>\n        <v-tooltip top>\n          <v-btn icon slot=\"activator\" @click=\"rollInitiative()\" >\n            <v-icon>mdi-dice-multiple</v-icon>\n          </v-btn>\n          <span>Roll Initiative!</span>\n        </v-tooltip>\n        <!-- Initiative v-model'd input -->\n        <v-text-field\n          reverse\n          label=\"Initiative\"\n          :rules=\"[validate]\"\n          v-model=\"initiative\"/>\n        <!-- Conditional clear button -->\n        <v-btn icon @click=\"clearInitiative()\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </v-layout>\n    </v-flex>\n  </v-layout>\n</template>\n\n<script>\nexport default {\n  name: 'initiative',\n  props: ['charIndex'],\n  computed: {\n    character () {\n      return this.$store.state.characters[this.charIndex]\n    },\n    initiative: {\n      get () {\n        return this.character.initiative\n      },\n      set (val) {\n        if (this.validate(val) !== true) {\n          return\n        }\n        let newInitiative = null\n        if (val !== null) {\n          newInitiative = parseInt(val)\n        }\n        this.$store.commit('setInitiative', {\n          charIndex: this.charIndex,\n          initiative: newInitiative\n        })\n      }\n    }\n  },\n  methods: {\n    validate (val) {\n      if (typeof val === 'string' && val.toLowerCase().includes('e')) {\n        return 'Scientific notation not allowed'\n      }\n      if (val === null) {\n        return true\n      }\n      if (isNaN(parseInt(val))) {\n        return 'Input is not a number'\n      }\n      if (parseInt(val) < 0) {\n        return 'No negative numbers'\n      }\n      return true\n    },\n    rollInitiative () {\n      this.initiative = Math.floor((this.character.abilityScores.DEX - 10) / 2) + Math.floor(Math.random() * 20) + 1\n    },\n    clearInitiative () {\n      this.initiative = null\n    }\n  }\n}\n</script>\n"]}]}