{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/AbilityScores.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/AbilityScores.vue","mtime":1539902140716},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'AbilityScores',\n  props: ['scores', 'index'],\n  methods: {\n    getMod: function getMod(val) {\n      var modifier = Math.floor((val - 10) / 2);\n\n      if (modifier > 0) {\n        return '+' + modifier;\n      } else {\n        return '' + modifier;\n      }\n    },\n    offsetStat: function offsetStat(stat, offset) {\n      this.$store.commit('offsetStat', {\n        stat: stat,\n        offset: offset,\n        index: this.index\n      });\n    },\n    rollStat: function rollStat(stat) {\n      var rolls = [];\n\n      for (var i = 0; i < 4; i++) {\n        rolls.push(Math.floor(Math.random() * 6) + 1);\n      }\n\n      this.droppedDice = 'mdi-dice-' + Math.min.apply(null, rolls).toString();\n      rolls.splice(rolls.indexOf(Math.min.apply(null, rolls)), 1);\n\n      var getsum = function getsum(total, num) {\n        return total + num;\n      };\n\n      var newtotal = rolls.reduce(getsum);\n      this.$store.commit('offsetStat', {\n        stat: stat,\n        offset: newtotal - this.scores[stat],\n        index: this.index\n      });\n      this.diceResult = rolls.map(function (val) {\n        return 'mdi-dice-' + val.toString();\n      });\n    }\n  },\n  data: function data() {\n    return {\n      selectedStat: 'STR',\n      diceResult: [],\n      droppedDice: '',\n      statsDialog: false\n    };\n  }\n};",{"version":3,"sources":["AbilityScores.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,eAAA;AACA,QAAA,eADA;AAEA,SAAA,CAAA,QAAA,EAAA,OAAA,CAFA;AAGA,WAAA;AACA,UADA,kBACA,GADA,EACA;AACA,UAAA,WAAA,KAAA,KAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,CAAA;;AACA,UAAA,WAAA,CAAA,EAAA;AACA,eAAA,MAAA,QAAA;AACA,OAFA,MAEA;AACA,eAAA,KAAA,QAAA;AACA;AACA,KARA;AASA,cATA,sBASA,IATA,EASA,MATA,EASA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EAAA;AACA,cAAA,IADA;AAEA,gBAAA,MAFA;AAGA,eAAA,KAAA;AAHA,OAAA;AAKA,KAfA;AAgBA,YAhBA,oBAgBA,IAhBA,EAgBA;AACA,UAAA,QAAA,EAAA;;AACA,WAAA,IAAA,IAAA,CAAA,EAAA,IAAA,CAAA,EAAA,GAAA,EAAA;AACA,cAAA,IAAA,CAAA,KAAA,KAAA,CAAA,KAAA,MAAA,KAAA,CAAA,IAAA,CAAA;AACA;;AACA,WAAA,WAAA,GAAA,cAAA,KAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,YAAA,MAAA,CAAA,MAAA,OAAA,CAAA,KAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAAA;;AACA,UAAA,SAAA,SAAA,MAAA,CAAA,KAAA,EAAA,GAAA,EAAA;AACA,eAAA,QAAA,GAAA;AACA,OAFA;;AAGA,UAAA,WAAA,MAAA,MAAA,CAAA,MAAA,CAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,YAAA,EAAA;AACA,cAAA,IADA;AAEA,gBAAA,WAAA,KAAA,MAAA,CAAA,IAAA,CAFA;AAGA,eAAA,KAAA;AAHA,OAAA;AAKA,WAAA,UAAA,GAAA,MAAA,GAAA,CAAA,eAAA;AACA,eAAA,cAAA,IAAA,QAAA,EAAA;AACA,OAFA,CAAA;AAGA;AAnCA,GAHA;AAwCA,MAxCA,kBAwCA;AACA,WAAA;AACA,oBAAA,KADA;AAEA,kBAAA,EAFA;AAGA,mBAAA,EAHA;AAIA,mBAAA;AAJA,KAAA;AAMA;AA/CA,CAAA","sourcesContent":["<template>\n  <v-layout align-center justify-start row>\n    <v-layout v-for=\"(statVal, statName) in scores\" :key=\"statName\" align-center justify-start column>\n      <span><h3> {{statName}} </h3></span>\n      <v-btn flat @click=\"selectedStat=statName; diceResult = []; droppedDice = ''; statsDialog=true;\">{{statVal}}</v-btn>\n      <span> {{getMod(statVal)}} </span>\n    </v-layout>\n    <v-dialog v-model=\"statsDialog\" max-width=150>\n      <v-card>\n        <v-layout align-center justify-space-around>\n          <v-icon v-for=\"(val, index) in diceResult\" :key=\"index\">{{val}}</v-icon>\n          <v-icon color=\"grey darken-1\">{{droppedDice}}</v-icon>\n        </v-layout>\n        <v-layout align-center justify-start column>\n          <v-btn flat @click=\"offsetStat(selectedStat, 1)\">+</v-btn>\n          <span>{{scores[selectedStat]}}</span>\n          <v-btn flat @click=\"offsetStat(selectedStat, -1)\">-</v-btn>\n          <v-btn flat @click=\"rollStat(selectedStat)\"><v-icon>mdi-dice-multiple</v-icon></v-btn>\n        </v-layout>\n      </v-card>\n    </v-dialog>\n  </v-layout>\n</template>\n\n<script>\nexport default {\n  name: 'AbilityScores',\n  props: ['scores', 'index'],\n  methods: {\n    getMod(val) {\n      let modifier = Math.floor((val - 10) / 2)\n      if (modifier > 0) {\n        return '+' + modifier\n      } else {\n        return '' + modifier\n      }\n    },\n    offsetStat(stat, offset) {\n      this.$store.commit('offsetStat', {\n        stat: stat,\n        offset: offset,\n        index: this.index,\n      })\n    },\n    rollStat(stat) {\n      let rolls = []\n      for (let i = 0; i < 4; i++) {\n        rolls.push(Math.floor(Math.random() * 6) + 1)\n      }\n      this.droppedDice = 'mdi-dice-' + Math.min.apply(null, rolls).toString()\n      rolls.splice(rolls.indexOf(Math.min.apply(null, rolls)), 1)\n      let getsum = (total, num) => {\n        return total + num\n      }\n      let newtotal = rolls.reduce(getsum)\n      this.$store.commit('offsetStat', {\n        stat: stat,\n        offset: newtotal - this.scores[stat],\n        index: this.index,\n      })\n      this.diceResult = rolls.map(val => {\n        return 'mdi-dice-' + val.toString()\n      })\n    },\n  },\n  data() {\n    return {\n      selectedStat: 'STR',\n      diceResult: [],\n      droppedDice: '',\n      statsDialog: false,\n    }\n  },\n}\n</script>\n"],"sourceRoot":"src/components"}]}