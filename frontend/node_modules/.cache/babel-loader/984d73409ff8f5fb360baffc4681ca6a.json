{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/HitPoints.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/components/HitPoints.vue","mtime":1539900122677},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: ['charIndex'],\n  mounted: function mounted() {\n    this.getHealth(false);\n    this.offset = this.maxHitpoints;\n    this.heal();\n    this.offset = '0';\n  },\n  computed: {\n    character: function character() {\n      return this.$store.state.characters[this.charIndex];\n    },\n    deathThrows: function deathThrows() {\n      return this.character.deathThrows;\n    },\n    hitDice: function hitDice() {\n      return this.$store.state.hitDice;\n    },\n    hitpoints: {\n      get: function get() {\n        return this.character.hitpoints;\n      },\n      set: function set(val) {\n        if (isNaN(parseInt(val))) {\n          return;\n        }\n\n        this.$store.commit('setHP', {\n          charIndex: this.charIndex,\n          hitpoints: parseInt(val)\n        });\n      }\n    },\n    maxHitpoints: {\n      get: function get() {\n        return this.character.maxHitpoints;\n      },\n      set: function set(val) {\n        if (isNaN(parseInt(val))) {\n          return;\n        }\n\n        this.$store.commit('setMaxHP', {\n          charIndex: this.charIndex,\n          hitpoints: parseInt(val)\n        });\n      }\n    },\n    rollHealth: {\n      get: function get() {\n        // unused\n        return this.character.rollHealth;\n      },\n      set: function set(val) {\n        this.$store.commit('setRollState', {\n          charIndex: this.charIndex,\n          rollHealth: val\n        });\n      }\n    }\n  },\n  data: function data() {\n    return {\n      offset: '0',\n      hitpointDialog: false\n    };\n  },\n  methods: {\n    getHealth: function getHealth(roll) {\n      if (this.character.classes.length === 0) {\n        return;\n      }\n\n      var totalHealth = 0;\n      var firstLevel = true;\n      var constitutionOffset = Math.floor((this.character.abilityScores.CON - 10) / 2);\n\n      for (var c = 0; c < this.character.classes.length; c++) {\n        for (var l = 0; l < this.character.classes[c].level; l++) {\n          totalHealth += constitutionOffset;\n          var value = 0;\n          var dice = this.hitDice[this.character.classes[c].classname.split(' ')[0]];\n\n          if (firstLevel) {\n            // take max health for first level\n            value = dice;\n            firstLevel = false;\n          } else if (roll) {\n            value = Math.floor(Math.random() * (dice - 1)) + 1;\n          } else {\n            value = Math.ceil(dice / 2);\n          }\n\n          totalHealth += value;\n        }\n      }\n\n      this.maxHitpoints = totalHealth;\n\n      if (this.hitpoints > this.maxHitpoints) {\n        this.hitpoints = this.maxHitpoints;\n      } // used to set health on level up (not sure what to do on decrease...)\n\n\n      this.rollHealth = roll;\n    },\n    heal: function heal() {\n      if (isNaN(parseInt(this.hitpoints)) || isNaN(parseInt(this.offset))) {\n        return;\n      }\n\n      if (parseInt(this.offset) === 0) {\n        return;\n      }\n\n      if (this.hitpoints <= 0 && this.deathThrows === 3) {\n        this.$store.commit('showSnackbar', {\n          color: 'black',\n          message: 'You cannot heal death',\n          func: this.resurrect,\n          buttonMessage: 'Resurrect?'\n        });\n        return;\n      }\n\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: parseInt(this.hitpoints) + parseInt(this.offset)\n      });\n    },\n    hurt: function hurt() {\n      if (isNaN(parseInt(this.hitpoints)) || isNaN(parseInt(this.offset))) {\n        return;\n      }\n\n      if (parseInt(this.offset) === 0) {\n        return;\n      }\n\n      if (this.hitpoints <= 0 && this.deathThrows < 3) {\n        this.$store.commit('setDeathThrows', {\n          charIndex: this.charIndex,\n          throwVal: this.deathThrows + 1\n        });\n        return;\n      }\n\n      var newHP = parseInt(this.hitpoints) - parseInt(this.offset);\n\n      if (parseInt(this.offset) >= parseInt(this.hitpoints) + parseInt(this.maxHitpoints)) {\n        this.$store.commit('setDeathThrows', {\n          charIndex: this.charIndex,\n          throwVal: 3\n        });\n        newHP = 0;\n      }\n\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: newHP\n      });\n    },\n    lessThanOrEqualToMax: function lessThanOrEqualToMax(val) {\n      if (parseInt(val) > this.maxHitpoints) {\n        return 'HP must be less than Max HP';\n      }\n\n      return true;\n    },\n    mustBeNum: function mustBeNum(val) {\n      if (typeof val === 'string' && val.toLowerCase().includes('e')) {\n        return 'Scientific notation not allowed';\n      }\n\n      if (isNaN(parseInt(val))) {\n        return 'Input is not a number';\n      }\n\n      return true;\n    },\n    minNum: function minNum(val) {\n      if (parseInt(val) < 0) {\n        return 'No negative numbers';\n      }\n\n      return true;\n    },\n    resurrect: function resurrect() {\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: 1\n      });\n      this.$store.commit('hideSnackbar');\n    }\n  }\n};",{"version":3,"sources":["HitPoints.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <v-btn @click=\"hitpointDialog=true\" round flat><v-layout justify-space-around align-center><v-icon>mdi-heart</v-icon><span>{{hitpoints}} / {{maxHitpoints}}</span></v-layout></v-btn>\n    <!-- Hit Point Counter md-heart -->\n    <!-- Hit Point Roll md-refresh -->\n    <!-- Receive Attack Dialog md-sword -->\n    <v-dialog v-model=\"hitpointDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <h2>Health</h2>\n        </v-card-title>\n        <v-card-text>\n          <v-layout align-center justify-center row fill-height>\n            <v-tooltip top> <!-- TODO Replace with broken shield icon -->\n              <v-btn large icon flat slot=\"activator\" @click=\"hurt\"><v-icon>mdi-sword</v-icon></v-btn>\n              <span>Take Damage</span>\n            </v-tooltip>\n            <v-flex xs1>\n              <v-text-field\n                single-line\n                :rules=\"[mustBeNum, minNum]\"\n                v-model=\"offset\"\n              />\n            </v-flex>\n            <v-tooltip top>\n              <v-btn large icon flat slot=\"activator\" @click=\"heal\"><v-icon>mdi-medical-bag</v-icon></v-btn>\n              <span>Heal</span>\n            </v-tooltip>\n          </v-layout>\n        </v-card-text>\n        <v-card-text>\n          <v-layout align-center justify-space-between row fill-height>\n            <h3>Current Health :</h3>\n            <v-flex xs2>\n              <v-text-field\n                single-line\n                reverse\n                :rules=\"[lessThanOrEqualToMax, mustBeNum, minNum]\"\n                label=\"HP\"\n                v-model=\"hitpoints\"\n              />\n            </v-flex>\n          </v-layout>\n          <v-layout align-center justify-space-between row>\n            <h3>Maximum Health :</h3>\n            <v-flex xs2>\n              <v-text-field\n                single-line\n                reverse\n                :rules=\"[mustBeNum, minNum]\"\n                label=\"Max HP\"\n                v-model=\"maxHitpoints\"\n              />\n            </v-flex>\n          </v-layout>\n        </v-card-text>\n        <v-card-text>\n          <v-layout justify-end row>\n            <v-tooltip top>\n              <v-btn icon flat slot=\"activator\" @click=\"getHealth(true)\"><v-icon>mdi-dice-multiple</v-icon></v-btn>\n              <span>Roll Health</span>\n            </v-tooltip>\n            <v-tooltip top>\n              <v-btn icon flat slot=\"activator\" @click=\"getHealth(false)\"><v-icon>mdi-heart-half-full</v-icon></v-btn>\n              <span>Take Avg for Health</span>\n            </v-tooltip>\n          </v-layout>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['charIndex'],\n  mounted() {\n    this.getHealth(false)\n    this.offset = this.maxHitpoints\n    this.heal()\n    this.offset = '0'\n  },\n  computed: {\n    character() {\n      return this.$store.state.characters[this.charIndex]\n    },\n    deathThrows () {\n      return this.character.deathThrows\n    },\n    hitDice () {\n      return this.$store.state.hitDice\n    },\n    hitpoints: {\n      get() {\n        return this.character.hitpoints\n      },\n      set(val) {\n        if (isNaN(parseInt(val))) {\n          return\n        }\n        this.$store.commit('setHP', {\n          charIndex: this.charIndex,\n          hitpoints: parseInt(val),\n        })\n      },\n    },\n    maxHitpoints: {\n      get() {\n        return this.character.maxHitpoints\n      },\n      set(val) {\n        if (isNaN(parseInt(val))) {\n          return\n        }\n        this.$store.commit('setMaxHP', {\n          charIndex: this.charIndex,\n          hitpoints: parseInt(val),\n        })\n      },\n    },\n    rollHealth: {\n      get() {\n        // unused\n        return this.character.rollHealth\n      },\n      set(val) {\n        this.$store.commit('setRollState', {\n          charIndex: this.charIndex,\n          rollHealth: val,\n        })\n      },\n    },\n  },\n  data() {\n    return {\n      offset: '0',\n      hitpointDialog: false,\n    }\n  },\n  methods: {\n    getHealth (roll) {\n      if (this.character.classes.length === 0) {\n        return\n      }\n      let totalHealth = 0\n      let firstLevel = true\n      let constitutionOffset = Math.floor((this.character.abilityScores.CON - 10) / 2)\n      for (let c = 0; c < this.character.classes.length; c++) {\n        for (let l = 0; l < this.character.classes[c].level; l++) {\n          totalHealth += constitutionOffset\n          let value = 0\n          let dice = this.hitDice[this.character.classes[c].classname.split(' ')[0]]\n          if (firstLevel) {\n            // take max health for first level\n            value = dice\n            firstLevel = false\n          } else if (roll) {\n            value = (Math.floor(Math.random() * (dice - 1)) + 1)\n          } else {\n            value = Math.ceil(dice / 2)\n          }\n          totalHealth += value\n        }\n      }\n      this.maxHitpoints = totalHealth\n      if (this.hitpoints > this.maxHitpoints) {\n        this.hitpoints = this.maxHitpoints\n      }\n      // used to set health on level up (not sure what to do on decrease...)\n      this.rollHealth = roll\n    },\n    heal () {\n      if (isNaN(parseInt(this.hitpoints)) || isNaN(parseInt(this.offset))) {\n        return\n      }\n      if (parseInt(this.offset) === 0) {\n        return\n      }\n      if (this.hitpoints <= 0 && this.deathThrows === 3) {\n        this.$store.commit('showSnackbar', {\n          color: 'black',\n          message: 'You cannot heal death',\n          func: this.resurrect,\n          buttonMessage: 'Resurrect?'\n        })\n        return\n      }\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: parseInt(this.hitpoints) + parseInt(this.offset),\n      })\n    },\n    hurt() {\n      if (isNaN(parseInt(this.hitpoints)) || isNaN(parseInt(this.offset))) {\n        return\n      }\n      if (parseInt(this.offset) === 0) {\n        return\n      }\n      if (this.hitpoints <= 0 && this.deathThrows < 3) {\n        this.$store.commit('setDeathThrows', {\n          charIndex: this.charIndex,\n          throwVal: this.deathThrows + 1\n        })\n        return\n      }\n      let newHP = parseInt(this.hitpoints) - parseInt(this.offset)\n      if (parseInt(this.offset) >= parseInt(this.hitpoints) + parseInt(this.maxHitpoints)) {\n        this.$store.commit('setDeathThrows', {\n          charIndex: this.charIndex,\n          throwVal: 3\n        })\n        newHP = 0\n      }\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: newHP\n      })\n    },\n    lessThanOrEqualToMax(val) {\n      if (parseInt(val) > this.maxHitpoints) {\n        return 'HP must be less than Max HP'\n      }\n      return true\n    },\n    mustBeNum(val) {\n      if (typeof val === 'string' && val.toLowerCase().includes('e')) {\n        return 'Scientific notation not allowed'\n      }\n      if (isNaN(parseInt(val))) {\n        return 'Input is not a number'\n      }\n      return true\n    },\n    minNum (val) {\n      if (parseInt(val) < 0) {\n        return 'No negative numbers'\n      }\n      return true\n    },\n    resurrect () {\n      this.$store.commit('setHP', {\n        charIndex: this.charIndex,\n        hitpoints: 1\n      })\n      this.$store.commit('hideSnackbar')\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components"}]}