{"remainingRequest":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/store.js","dependencies":[{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/store.js","mtime":1539902173895},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1539818865210},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nvar defaultClass = {\n  classname: 'Bard',\n  level: 1,\n  slots: {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0\n  },\n  workingSlots: {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0\n  }\n};\nvar defaultCharacter = {\n  deathThrows: 0,\n  lifeThrows: 0,\n  initiative: null,\n  hitpoints: 1,\n  maxHitpoints: 1,\n  id: '1',\n  name: '',\n  proficiency: 0,\n  concentrating: '',\n  classes: [JSON.parse(JSON.stringify(defaultClass))],\n  abilityScores: {\n    STR: 10,\n    INT: 10,\n    WIS: 10,\n    DEX: 10,\n    CON: 10,\n    CHR: 10\n  }\n};\nexport default new Vuex.Store({\n  state: {\n    hitDice: {\n      Barbarian: 12,\n      Bard: 8,\n      Cleric: 8,\n      Druid: 8,\n      Fighter: 10,\n      Monk: 8,\n      Paladin: 10,\n      Ranger: 10,\n      Rogue: 8,\n      Sorcerer: 6,\n      Warlock: 8,\n      Wizard: 6\n    },\n    snackbar: {\n      show: false,\n      color: 'red darken-1',\n      message: '',\n      buttonMessage: '',\n      buttonFunction: undefined\n    },\n    spellsInfo: {\n      spellList: [],\n      className: '',\n      currSpellInfo: {}\n    },\n    classOpts: [],\n    magicClassOpts: [],\n    characters: [JSON.parse(JSON.stringify(defaultCharacter))]\n  },\n  mutations: {\n    // character mutations\n    addCharacter: function addCharacter() {\n      var newChar = JSON.parse(JSON.stringify(defaultCharacter));\n      newChar.id = Math.floor(Math.random() * Math.pow(10, 10) + 2).toString();\n      this.state.characters.push(newChar);\n    },\n    changeClass: function changeClass(state, payload) {\n      // charIndex classIndex newClass\n      this.state.characters[payload.charIndex].classes[payload.classIndex].classname = payload.newClass;\n      this.commit('updateSlots', {\n        charIndex: payload.charIndex,\n        classIndex: payload.classIndex\n      });\n    },\n    changeClassLevel: function changeClassLevel(state, payload) {\n      // charIndex classIndex newLevel\n      var levelOffset = payload.newLevel - this.state.characters[payload.charIndex].classes[payload.classIndex].level;\n\n      if (payload.classIndex === 0 && this.state.characters[payload.charIndex].classes[payload.classIndex].level === 0) {\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: this.state.characters[payload.charIndex].maxHitpoints += this.state.hitDice[this.state.characters[payload.charIndex].classes[payload.classIndex].classname] + (this.state.characters[payload.charIndex].abilityScores.CON - 10) / 2\n        });\n        levelOffset -= 1;\n      }\n\n      if (this.state.characters[payload.charIndex].rollHealth) {\n        // health was calculated by rolling. Roll again.\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: this.state.characters[payload.charIndex].maxHitpoints += (Math.random() * (this.state.hitDice[this.state.characters[payload.charIndex].classes[payload.classIndex].classname] - 1) + 1 + (this.state.characters[payload.charIndex].abilityScores.CON - 10) / 2) * levelOffset\n        });\n      } else {\n        // health took average. do that.\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: this.state.characters[payload.charIndex].maxHitpoints += (Math.ceil(this.state.hitDice[this.state.characters[payload.charIndex].classes[payload.classIndex].classname] / 2) + (this.state.characters[payload.charIndex].abilityScores.CON - 10) / 2) * levelOffset\n        });\n      }\n\n      this.state.characters[payload.charIndex].classes[payload.classIndex].level = payload.newLevel;\n      this.commit('updateSlots', {\n        charIndex: payload.charIndex,\n        classIndex: payload.classIndex\n      });\n      this.commit('proficiencyBonus', payload.charIndex);\n    },\n    changeName: function changeName(state, payload) {\n      // index name\n      this.state.characters[payload.index].name = payload.name;\n    },\n    decrementSlot: function decrementSlot(state, payload) {\n      // charIndex classIndex level\n      if (this.state.characters[payload.charIndex].classes[payload.classIndex].workingSlots[payload.level] > 0) {\n        this.state.characters[payload.charIndex].classes[payload.classIndex].workingSlots[payload.level]--;\n      }\n    },\n    incrementSlot: function incrementSlot(state, payload) {\n      // charIndex classIndex level\n      this.state.characters[payload.charIndex].classes[payload.classIndex].workingSlots[payload.level]++;\n    },\n    longRestAll: function longRestAll() {\n      for (var c in this.state.characters) {\n        this.commit('longRest', c);\n      }\n    },\n    longRest: function longRest(state, charIndex) {\n      if (this.state.characters[charIndex].hitpoints === 0) {\n        // you cannot gain the benefits of a long rest at 0 hitpoints\n        this.commit('showSnackbar', {\n          message: this.state.characters[charIndex].name + ' cannot gain the benefits of a long rest at 0 HP'\n        });\n        return;\n      }\n\n      this.commit('setHP', {\n        charIndex: charIndex,\n        hitpoints: this.state.characters[charIndex].maxHitpoints\n      });\n\n      for (var c in this.state.characters[charIndex].classes) {\n        this.state.characters[charIndex].classes[c].workingSlots = JSON.parse(JSON.stringify(this.state.characters[charIndex].classes[c].slots));\n      }\n    },\n    multiclass: function multiclass(state, payload) {\n      // index, classname\n      if (this.state.characters[payload.index].classes.length > 10) {\n        return; // no more than 10 classes\n      }\n\n      for (var i in this.state.characters[payload.index].classes) {\n        var c = this.state.characters[payload.index].classes[i];\n\n        if (c.classname === payload.classname) {\n          return; // no duplicate classes\n        }\n      }\n\n      var newclass = JSON.parse(JSON.stringify(defaultClass));\n      newclass.classname = payload.classname;\n      this.state.characters[payload.index].classes.push(newclass);\n    },\n    offsetStat: function offsetStat(state, payload) {\n      // stat index offset\n      if (this.state.characters[payload.index].abilityScores[payload.stat] + payload.offset < 0) {\n        return;\n      }\n\n      if (payload.stat === 'CON') {\n        var totalLevel = 0;\n\n        for (var c in this.state.characters[payload.index].classes) {\n          totalLevel += this.state.characters[payload.index].classes[c].level;\n        }\n\n        if (totalLevel === 0) {\n          this.state.characters[payload.index].abilityScores[payload.stat] += payload.offset;\n          return;\n        }\n\n        var oddCorrection = this.state.characters[payload.index].abilityScores[payload.stat] % 2 / 2.0;\n        var newmax = this.state.characters[payload.index].maxHitpoints + Math.floor(payload.offset / 2 + oddCorrection) * totalLevel;\n        this.commit('setMaxHP', {\n          charIndex: payload.index,\n          hitpoints: newmax\n        });\n\n        if (this.state.characters[payload.index].maxHitpoints < this.state.characters[payload.index].hitpoints) {\n          this.commit('setHP', {\n            charIndex: payload.index,\n            hitpoints: newmax\n          });\n        }\n      }\n\n      this.state.characters[payload.index].abilityScores[payload.stat] += payload.offset;\n    },\n    proficiencyBonus: function proficiencyBonus(state, charIndex) {\n      var totalLevel = 0;\n\n      for (var c in this.state.characters[charIndex].classes) {\n        if (this.state.characters[charIndex].classes[c].hasOwnProperty('level')) {\n          totalLevel += this.state.characters[charIndex].classes[c].level;\n        }\n      }\n\n      this.state.characters[charIndex].proficiency = Math.floor(totalLevel / 5) + 2;\n    },\n    removeCharacter: function removeCharacter(state, identifier) {\n      var index = this.state.characters.findIndex(function (element) {\n        return element.id === identifier;\n      });\n\n      if (index === -1) {\n        return;\n      }\n\n      this.state.characters.splice(index, 1);\n    },\n    setDeathThrows: function setDeathThrows(state, payload) {\n      // charIndex throwVal\n      this.state.characters[payload.charIndex].deathThrows = payload.throwVal;\n    },\n    setLifeThrows: function setLifeThrows(state, payload) {\n      // charIndex throwVal\n      this.state.characters[payload.charIndex].lifeThrows = payload.throwVal;\n    },\n    setHP: function setHP(state, payload) {\n      // charIndex hitpoints\n      if (payload.hitpoints > 0) {\n        this.commit('setLifeThrows', {\n          charIndex: payload.charIndex,\n          throwVal: 0\n        });\n        this.commit('setDeathThrows', {\n          charIndex: payload.charIndex,\n          throwVal: 0\n        });\n      }\n\n      if (payload.hitpoints < 0) {\n        payload.hitpoints = 0;\n      }\n\n      if (payload.hitpoints > this.state.characters[payload.charIndex].maxHitpoints) {\n        this.state.characters[payload.charIndex].hitpoints = Math.floor(this.state.characters[payload.charIndex].maxHitpoints);\n        return;\n      }\n\n      this.state.characters[payload.charIndex].hitpoints = payload.hitpoints;\n    },\n    setMaxHP: function setMaxHP(state, payload) {\n      // charIndex hitpoints\n      if (payload.hitpoints >= 0) {\n        this.state.characters[payload.charIndex].maxHitpoints = Math.floor(payload.hitpoints);\n      }\n    },\n    setInitiative: function setInitiative(state, payload) {\n      // charIndex initiative\n      this.state.characters[payload.charIndex].initiative = payload.initiative;\n    },\n    setRollState: function setRollState(state, payload) {\n      this.state.characters[payload.charIndex].rollHealth = payload.rollHealth;\n    },\n    stopConcentrating: function stopConcentrating(state, index) {\n      this.state.characters[index].concentrating = '';\n    },\n    updateSlots: function updateSlots(state, payload) {\n      var _this = this;\n\n      // charIndex classIndex\n      var strBody = JSON.stringify({\n        classes: [{\n          class: this.state.characters[payload.charIndex].classes[payload.classIndex].classname,\n          level: this.state.characters[payload.charIndex].classes[payload.classIndex].level\n        }]\n      });\n      var r = new Request('http://localhost:8010/magic/slots/', {\n        method: 'POST',\n        body: strBody\n      });\n      fetch(r).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong on api server!');\n        }\n      }).then(function (response) {\n        _this.state.characters[payload.charIndex].classes[payload.classIndex].slots = response.Slots; // make a deep copy for long rests without need to re-access backend\n\n        _this.state.characters[payload.charIndex].classes[payload.classIndex].workingSlots = JSON.parse(JSON.stringify(response.Slots));\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    // classopts mutations\n    updateClassOpts: function updateClassOpts() {\n      var _this2 = this;\n\n      var r = new Request('http://localhost:8010/classes/');\n      fetch(r).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong on api server!');\n        }\n      }).then(function (response) {\n        _this2.state.classOpts = response.Classes;\n        _this2.state.magicClassOpts = response.MagicClasses;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    // spell mutations\n    setSpellOpts: function setSpellOpts(state, payload) {\n      // className spellOpts\n      this.state.spellsInfo.currSpellInfo = {};\n      this.state.spellsInfo.spellList = payload.spellOpts;\n      this.state.spellsInfo.className = payload.className;\n    },\n    setSpellInfo: function setSpellInfo(state, spellInfo) {\n      this.state.spellsInfo.currSpellInfo = spellInfo;\n    },\n    // snackbar mutations\n    hideSnackbar: function hideSnackbar() {\n      this.state.snackbar.show = false;\n    },\n    showSnackbar: function showSnackbar(state, payload) {\n      // message, optional: func buttonMessage color\n      this.state.snackbar.message = payload.message;\n\n      if (payload.hasOwnProperty('func') && payload.hasOwnProperty('buttonMessage')) {\n        this.state.snackbar.buttonMessage = payload.buttonMessage;\n        this.state.snackbar.buttonFunction = payload.func;\n      }\n\n      if (payload.hasOwnProperty('color')) {\n        this.state.snackbar.color = payload.color;\n      }\n\n      this.state.snackbar.show = true;\n    }\n  }\n});",{"version":3,"sources":["/Users/daren.mcculley/go/src/github.com/mcculleydj/DMinimal/frontend/src/store.js"],"names":["Vue","Vuex","use","defaultClass","classname","level","slots","workingSlots","defaultCharacter","deathThrows","lifeThrows","initiative","hitpoints","maxHitpoints","id","name","proficiency","concentrating","classes","JSON","parse","stringify","abilityScores","STR","INT","WIS","DEX","CON","CHR","Store","state","hitDice","Barbarian","Bard","Cleric","Druid","Fighter","Monk","Paladin","Ranger","Rogue","Sorcerer","Warlock","Wizard","snackbar","show","color","message","buttonMessage","buttonFunction","undefined","spellsInfo","spellList","className","currSpellInfo","classOpts","magicClassOpts","characters","mutations","addCharacter","newChar","Math","floor","random","toString","push","changeClass","payload","charIndex","classIndex","newClass","commit","changeClassLevel","levelOffset","newLevel","rollHealth","ceil","changeName","index","decrementSlot","incrementSlot","longRestAll","c","longRest","multiclass","length","i","newclass","offsetStat","stat","offset","totalLevel","oddCorrection","newmax","proficiencyBonus","hasOwnProperty","removeCharacter","identifier","findIndex","element","splice","setDeathThrows","throwVal","setLifeThrows","setHP","setMaxHP","setInitiative","setRollState","stopConcentrating","updateSlots","strBody","class","r","Request","method","body","fetch","then","response","status","json","Error","Slots","catch","console","error","updateClassOpts","Classes","MagicClasses","setSpellOpts","spellOpts","setSpellInfo","spellInfo","hideSnackbar","showSnackbar","func"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nlet defaultClass = {\n  classname: 'Bard',\n  level: 1,\n  slots: {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0,\n  },\n  workingSlots: {\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0,\n  },\n}\n\nlet defaultCharacter = {\n  deathThrows: 0,\n  lifeThrows: 0,\n  initiative: null,\n  hitpoints: 1,\n  maxHitpoints: 1,\n  id: '1',\n  name: '',\n  proficiency: 0,\n  concentrating: '',\n  classes: [JSON.parse(JSON.stringify(defaultClass))],\n  abilityScores: {\n    STR: 10,\n    INT: 10,\n    WIS: 10,\n    DEX: 10,\n    CON: 10,\n    CHR: 10,\n  },\n}\n\nexport default new Vuex.Store({\n  state: {\n    hitDice: {\n      Barbarian: 12,\n      Bard: 8,\n      Cleric: 8,\n      Druid: 8,\n      Fighter: 10,\n      Monk: 8,\n      Paladin: 10,\n      Ranger: 10,\n      Rogue: 8,\n      Sorcerer: 6,\n      Warlock: 8,\n      Wizard: 6,\n    },\n    snackbar: {\n      show: false,\n      color: 'red darken-1',\n      message: '',\n      buttonMessage: '',\n      buttonFunction: undefined,\n    },\n    spellsInfo: {\n      spellList: [],\n      className: '',\n      currSpellInfo: {},\n    },\n    classOpts: [],\n    magicClassOpts: [],\n    characters: [JSON.parse(JSON.stringify(defaultCharacter))],\n  },\n  mutations: {\n    // character mutations\n    addCharacter() {\n      let newChar = JSON.parse(JSON.stringify(defaultCharacter))\n      newChar.id = Math.floor(Math.random() * 10 ** 10 + 2).toString()\n      this.state.characters.push(newChar)\n    },\n    changeClass(state, payload) {\n      // charIndex classIndex newClass\n      this.state.characters[payload.charIndex].classes[\n        payload.classIndex\n      ].classname = payload.newClass\n      this.commit('updateSlots', {\n        charIndex: payload.charIndex,\n        classIndex: payload.classIndex,\n      })\n    },\n    changeClassLevel(state, payload) {\n      // charIndex classIndex newLevel\n      let levelOffset =\n        payload.newLevel -\n        this.state.characters[payload.charIndex].classes[payload.classIndex]\n          .level\n      if (\n        payload.classIndex === 0 &&\n        this.state.characters[payload.charIndex].classes[payload.classIndex]\n          .level === 0\n      ) {\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: (this.state.characters[payload.charIndex].maxHitpoints +=\n            this.state.hitDice[\n              this.state.characters[payload.charIndex].classes[\n                payload.classIndex\n              ].classname\n            ] +\n            (this.state.characters[payload.charIndex].abilityScores.CON - 10) /\n              2),\n        })\n        levelOffset -= 1\n      }\n      if (this.state.characters[payload.charIndex].rollHealth) {\n        // health was calculated by rolling. Roll again.\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: (this.state.characters[payload.charIndex].maxHitpoints +=\n            (Math.random() *\n              (this.state.hitDice[\n                this.state.characters[payload.charIndex].classes[\n                  payload.classIndex\n                ].classname\n              ] -\n                1) +\n              1 +\n              (this.state.characters[payload.charIndex].abilityScores.CON -\n                10) /\n                2) *\n            levelOffset),\n        })\n      } else {\n        // health took average. do that.\n        this.commit('setMaxHP', {\n          charIndex: payload.charIndex,\n          hitpoints: (this.state.characters[payload.charIndex].maxHitpoints +=\n            (Math.ceil(\n              this.state.hitDice[\n                this.state.characters[payload.charIndex].classes[\n                  payload.classIndex\n                ].classname\n              ] / 2,\n            ) +\n              (this.state.characters[payload.charIndex].abilityScores.CON -\n                10) /\n                2) *\n            levelOffset),\n        })\n      }\n      this.state.characters[payload.charIndex].classes[\n        payload.classIndex\n      ].level = payload.newLevel\n      this.commit('updateSlots', {\n        charIndex: payload.charIndex,\n        classIndex: payload.classIndex,\n      })\n      this.commit('proficiencyBonus', payload.charIndex)\n    },\n    changeName(state, payload) {\n      // index name\n      this.state.characters[payload.index].name = payload.name\n    },\n    decrementSlot(state, payload) {\n      // charIndex classIndex level\n      if (\n        this.state.characters[payload.charIndex].classes[payload.classIndex]\n          .workingSlots[payload.level] > 0\n      ) {\n        this.state.characters[payload.charIndex].classes[payload.classIndex]\n          .workingSlots[payload.level]--\n      }\n    },\n    incrementSlot(state, payload) {\n      // charIndex classIndex level\n      this.state.characters[payload.charIndex].classes[payload.classIndex]\n        .workingSlots[payload.level]++\n    },\n    longRestAll() {\n      for (let c in this.state.characters) {\n        this.commit('longRest', c)\n      }\n    },\n    longRest(state, charIndex) {\n      if (this.state.characters[charIndex].hitpoints === 0) {\n        // you cannot gain the benefits of a long rest at 0 hitpoints\n        this.commit('showSnackbar', {\n          message:\n            this.state.characters[charIndex].name +\n            ' cannot gain the benefits of a long rest at 0 HP',\n        })\n        return\n      }\n      this.commit('setHP', {\n        charIndex: charIndex,\n        hitpoints: this.state.characters[charIndex].maxHitpoints,\n      })\n      for (let c in this.state.characters[charIndex].classes) {\n        this.state.characters[charIndex].classes[c].workingSlots = JSON.parse(\n          JSON.stringify(this.state.characters[charIndex].classes[c].slots),\n        )\n      }\n    },\n    multiclass(state, payload) {\n      // index, classname\n      if (this.state.characters[payload.index].classes.length > 10) {\n        return // no more than 10 classes\n      }\n      for (let i in this.state.characters[payload.index].classes) {\n        let c = this.state.characters[payload.index].classes[i]\n        if (c.classname === payload.classname) {\n          return // no duplicate classes\n        }\n      }\n      let newclass = JSON.parse(JSON.stringify(defaultClass))\n      newclass.classname = payload.classname\n      this.state.characters[payload.index].classes.push(newclass)\n    },\n    offsetStat(state, payload) {\n      // stat index offset\n      if (\n        this.state.characters[payload.index].abilityScores[payload.stat] +\n          payload.offset <\n        0\n      ) {\n        return\n      }\n      if (payload.stat === 'CON') {\n        let totalLevel = 0\n        for (let c in this.state.characters[payload.index].classes) {\n          totalLevel += this.state.characters[payload.index].classes[c].level\n        }\n        if (totalLevel === 0) {\n          this.state.characters[payload.index].abilityScores[payload.stat] +=\n            payload.offset\n          return\n        }\n        let oddCorrection =\n          (this.state.characters[payload.index].abilityScores[payload.stat] %\n            2) /\n          2.0\n        let newmax =\n          this.state.characters[payload.index].maxHitpoints +\n          Math.floor(payload.offset / 2 + oddCorrection) * totalLevel\n        this.commit('setMaxHP', {\n          charIndex: payload.index,\n          hitpoints: newmax,\n        })\n        if (\n          this.state.characters[payload.index].maxHitpoints <\n          this.state.characters[payload.index].hitpoints\n        ) {\n          this.commit('setHP', {\n            charIndex: payload.index,\n            hitpoints: newmax,\n          })\n        }\n      }\n      this.state.characters[payload.index].abilityScores[payload.stat] +=\n        payload.offset\n    },\n    proficiencyBonus(state, charIndex) {\n      let totalLevel = 0\n      for (let c in this.state.characters[charIndex].classes) {\n        if (\n          this.state.characters[charIndex].classes[c].hasOwnProperty('level')\n        ) {\n          totalLevel += this.state.characters[charIndex].classes[c].level\n        }\n      }\n      this.state.characters[charIndex].proficiency =\n        Math.floor(totalLevel / 5) + 2\n    },\n    removeCharacter(state, identifier) {\n      let index = this.state.characters.findIndex(function(element) {\n        return element.id === identifier\n      })\n      if (index === -1) {\n        return\n      }\n      this.state.characters.splice(index, 1)\n    },\n    setDeathThrows(state, payload) {\n      // charIndex throwVal\n      this.state.characters[payload.charIndex].deathThrows = payload.throwVal\n    },\n    setLifeThrows(state, payload) {\n      // charIndex throwVal\n      this.state.characters[payload.charIndex].lifeThrows = payload.throwVal\n    },\n    setHP(state, payload) {\n      // charIndex hitpoints\n      if (payload.hitpoints > 0) {\n        this.commit('setLifeThrows', {\n          charIndex: payload.charIndex,\n          throwVal: 0,\n        })\n        this.commit('setDeathThrows', {\n          charIndex: payload.charIndex,\n          throwVal: 0,\n        })\n      }\n      if (payload.hitpoints < 0) {\n        payload.hitpoints = 0\n      }\n      if (\n        payload.hitpoints >\n        this.state.characters[payload.charIndex].maxHitpoints\n      ) {\n        this.state.characters[payload.charIndex].hitpoints = Math.floor(\n          this.state.characters[payload.charIndex].maxHitpoints,\n        )\n        return\n      }\n      this.state.characters[payload.charIndex].hitpoints = payload.hitpoints\n    },\n    setMaxHP(state, payload) {\n      // charIndex hitpoints\n      if (payload.hitpoints >= 0) {\n        this.state.characters[payload.charIndex].maxHitpoints = Math.floor(\n          payload.hitpoints,\n        )\n      }\n    },\n    setInitiative(state, payload) {\n      // charIndex initiative\n      this.state.characters[payload.charIndex].initiative = payload.initiative\n    },\n    setRollState(state, payload) {\n      this.state.characters[payload.charIndex].rollHealth = payload.rollHealth\n    },\n    stopConcentrating(state, index) {\n      this.state.characters[index].concentrating = ''\n    },\n    updateSlots(state, payload) {\n      // charIndex classIndex\n      let strBody = JSON.stringify({\n        classes: [\n          {\n            class: this.state.characters[payload.charIndex].classes[\n              payload.classIndex\n            ].classname,\n            level: this.state.characters[payload.charIndex].classes[\n              payload.classIndex\n            ].level,\n          },\n        ],\n      })\n      let r = new Request('http://localhost:8010/magic/slots/', {\n        method: 'POST',\n        body: strBody,\n      })\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          this.state.characters[payload.charIndex].classes[\n            payload.classIndex\n          ].slots = response.Slots\n          // make a deep copy for long rests without need to re-access backend\n          this.state.characters[payload.charIndex].classes[\n            payload.classIndex\n          ].workingSlots = JSON.parse(JSON.stringify(response.Slots))\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n    // classopts mutations\n    updateClassOpts() {\n      let r = new Request('http://localhost:8010/classes/')\n      fetch(r)\n        .then(response => {\n          if (response.status === 200) {\n            return response.json()\n          } else {\n            throw new Error('Something went wrong on api server!')\n          }\n        })\n        .then(response => {\n          this.state.classOpts = response.Classes\n          this.state.magicClassOpts = response.MagicClasses\n        })\n        .catch(error => {\n          console.error(error)\n        })\n    },\n    // spell mutations\n    setSpellOpts(state, payload) {\n      // className spellOpts\n      this.state.spellsInfo.currSpellInfo = {}\n      this.state.spellsInfo.spellList = payload.spellOpts\n      this.state.spellsInfo.className = payload.className\n    },\n    setSpellInfo(state, spellInfo) {\n      this.state.spellsInfo.currSpellInfo = spellInfo\n    },\n    // snackbar mutations\n    hideSnackbar() {\n      this.state.snackbar.show = false\n    },\n    showSnackbar(state, payload) {\n      // message, optional: func buttonMessage color\n      this.state.snackbar.message = payload.message\n      if (\n        payload.hasOwnProperty('func') &&\n        payload.hasOwnProperty('buttonMessage')\n      ) {\n        this.state.snackbar.buttonMessage = payload.buttonMessage\n        this.state.snackbar.buttonFunction = payload.func\n      }\n      if (payload.hasOwnProperty('color')) {\n        this.state.snackbar.color = payload.color\n      }\n      this.state.snackbar.show = true\n    },\n  },\n})\n"]}]}